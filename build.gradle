plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.0'
	id 'io.spring.dependency-management' version '1.1.7'
//	id 'com.github.node-gradle.node' version '7.1.0'
}

group = 'com.nfssoundtrack'
version = '0.9'

java {
	sourceCompatibility = '17'
}

repositories {
	mavenCentral()
	maven {
		name 'm2-dv8tion'
		url 'https://m2.dv8tion.net/releases'
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-devtools'
	implementation 'org.springframework.boot:spring-boot-starter-json'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-aop'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
	implementation 'org.apache.poi:poi:5.4.1'
	implementation 'org.apache.poi:poi-ooxml:5.4.1'
	implementation 'org.apache.poi:poi-ooxml-full:5.4.1'
	implementation 'net.dv8tion:JDA:5.5.1'
	implementation 'org.mariadb.jdbc:mariadb-java-client:3.5.3'
	implementation 'org.apache.commons:commons-text:1.13.1'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.springframework.boot:spring-boot-test-autoconfigure'

}
/*
// Node.js configuration for minification
node {
	version = '22.17.0'
	npmVersion = '11.4.2'
	download = true
}

// Install minification tools
task installMinifyTools(type: NpmTask) {
	args = ['install', 'terser', 'clean-css-cli']
}

// Minify JavaScript files (excluding admin folder)
task minifyJs(type: Exec, dependsOn: installMinifyTools) {
	doFirst {
		// Create output directory if it doesn't exist
		file('src/main/resources/static/min/js').mkdirs()
		
		// Get all JS files except admin folder
		fileTree('src/main/resources/static/js') {
			include '*.js'
			exclude 'admin/**'
		}.each { jsFile ->
			def fileName = jsFile.name
			def outputFile = file("src/main/resources/static/min/js/${fileName}")
			
			// Minify each file individually
			exec {
				commandLine 'npx', 'terser', jsFile.absolutePath, 
					'--compress', '--mangle', '--output', outputFile.absolutePath
			}
		}
	}
	
	// Dummy command since we're doing the work in doFirst
	commandLine 'echo', 'JavaScript minification completed'
}

// Minify CSS files
task minifyCss(type: Exec, dependsOn: installMinifyTools) {
	doFirst {
		// Create output directory if it doesn't exist
		file('src/main/resources/static/min/css').mkdirs()
		
		// Get all CSS files
		fileTree('src/main/resources/static/css') {
			include '*.css'
		}.each { cssFile ->
			def fileName = cssFile.name
			def outputFile = file("src/main/resources/static/min/css/${fileName}")
			
			// Minify each file individually
			exec {
				commandLine 'npx', 'cleancss', cssFile.absolutePath, 
					'--output', outputFile.absolutePath
			}
		}
	}
	
	// Dummy command since we're doing the work in doFirst
	commandLine 'echo', 'CSS minification completed'
}

// Run minification before processing resources (can be disabled with -PskipMinify=true)
if (!project.hasProperty('skipMinify') || project.property('skipMinify') != 'true') {
    processResources.dependsOn minifyJs, minifyCss
}
*/
tasks.named('test') {
	useJUnitPlatform()
}
